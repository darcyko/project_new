version: 0.2

phases:
  install:
    commands:
      - echo "Starting Docker Daemon..."
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws --version  # Check AWS CLI version
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 905418067047.dkr.ecr.us-east-1.amazonaws.com
      - darcyko-atul=905418067047.dkr.ecr.us-east-1.amazonaws.com/darcyko-atul  # Set repository URI as an environment variable
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)  # Get the short commit hash
      - IMAGE_TAG=${COMMIT_HASH:=latest}  # Use commit hash as the image tag, fallback to 'latest'

  build:
    commands:
      - echo "Build started on $(date)"
      - python -V  # Print Python version
      - echo "Source directory: $CODEBUILD_SRC_DIR"
      - pwd  # Print working directory
      - env > .env  # Dump environment variables to file
      - ls -larth  # List directory contents
    
      # Nginx Image Building
      - echo "Building the Nginx Docker image..."
      - docker build -t darcyko-atul:latest -f Dockerfile .  # Build Docker image
      - docker tag darcyko-atul:latest $darcyko-atul:$IMAGE_TAG  # Tag Docker image with commit hash

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing the Docker images..."
      - docker image ls -a  # List all Docker images to verify

      # Push the Docker images to ECR
      - docker push darcyko-atul:latest
      - docker push $darcyko-atul:$IMAGE_TAG

      # Prepare the image details for ECS deployment (if needed)
      - printf '[{"imageUri":"%s"}]' $darcyko-atul:$IMAGE_TAG > imageDetail.json
      - printf '[{"name":"darcyko-atul","imageUri":"%s"}]' $darcyko-atul:$IMAGE_TAG > imagedefinitions.json
      - pwd  # Print working directory to verify final state

artifacts:
  files:
    - imagedefinitions.json  # Output ECS task definition (if using ECS)

